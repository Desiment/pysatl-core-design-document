ensure_path( 'TEXINPUTS', './configuration/' );
$pdf_mode=4;
$lualatex = 'lualatex  %O -halt-on-error -synctex=1 --shell-escape %S';
$out_dir = '.';
$aux_dir = 'build';

our @memoize_extract = ( 'memoize-extract.pl' );
our @memoize_clean = ( 'memoize-clean.pl' );
push @generated_exts, 'mmz', 'mmz.log';


add_hook( 'after_xlatex_analysis', \&mmz_analyze );
add_hook( 'after_main_pdf', \&mmz_extract_new );
# add_hook( 'cleanup', \&mmz_cleanup );

my $mmz_has_new = '';


#-----------------------------------------------------

sub mmz_analyze {
    use strict;
    my $base = $$Pbase;
    my $mmz_file = "$aux_dir1$base.mmz";
    $mmz_has_new = '';
    
    if (! -e $mmz_file) {
        print "mmz_analyze: No mmz file '$mmz_file', so memoize is not being used.\n";
        return 0;
    }

    if ( ! test_gen_file_time( $mmz_file) ) {
        warn "mmz_analyze: Mmz file '$mmz_file' exists, but wasn't generated\n",
             "  on this run so memoize is not **currently** being used.\n";
        return 0;
    }
    my $mmz_fh = undef;
    if (! open( $mmz_fh, '<', $mmz_file ) ) {
        warn "mmz_analyze: Mmz file '$mmz_file' exists, but I can't read it:\n",
        "  $!\n";
        return 1;
    }
    my @externs = ();
    my @dirs = ();
    while ( <$mmz_fh> ) {
         s/\s*$//;           # Remove trailing space, including new lines
         if ( /^\\mmzNewExtern\s+{([^}]+)}/ ) {
             # We have a new memo item without a corresponding pdf file.
             # It will be put in the aux directory. 
             my $file = "$aux_dir1$1";
             print "mmz_analyze: new extern for memoize: '$file'\n";
             push @externs, $file;
         }
         elsif ( /^\\mmzPrefix\s+{([^}]+)}/ ) {
             # Prefix.
             my $prefix = $1;
             if ( $prefix =~ m{^(.*)/[^/]*} ) {
                 my $dir = $1;
                 push @dirs, "$aux_dir1$1";

             }
         }
    }
    close $mmz_fh;
    foreach (@dirs) {
        if ( ! -e ) {
            my @cmd = ( @memoize_extract, '--mkdir', $_ ); 
            print "mmz_analyze: Making directory '$_' safely by running\n",
                  " @cmd\n";
            mkdir $_;
        }        
    }

    rdb_ensure_files_here( @externs );
    rdb_remove_files( $rule, "$mmz_file.log" );

    if (@externs ) {
        $mmz_has_new = $mmz_file;
    }
    return 0; 
}

#-----------------------------------------------------

sub mmz_extract_new {
    use strict;
    if ( $mmz_has_new eq '' ) { return 0; }

    my $mmz_file = $mmz_has_new;
    my ($mmz_file_no_path, $path) = fileparse( $mmz_file );
    my $pdf_file = $$Pdest;
    local $ENV{TEXMF_OUTPUT_DIRECTORY} = $aux_dir;
    for ('TEXMF_OUTPUT_DIRECTORY') {
        print "mmz_extract_new : ENV{$_} = '$ENV{$_}'\n";
    }
    my @cmd = (@memoize_extract, '--format', 'latex',
                    '--pdf', $pdf_file, $mmz_file_no_path ); 

    if ( ! -e $pdf_file ) {
        warn "mmz_extract_new: Cannot generate externs here, since no pdf file generated\n";
        return 1;
    }
    elsif ( ! test_gen_file($pdf_file) ) {
        warn "mmz_extract_new: Pdf file '$pdf_file' exists, but wasn't\n",
             "  generated on this run.  I'll run memoize-extract.  Pdf file may contain\n",
             "  extra pages generated by the memoize package.\n";
        return 1;
    }
    print "make_extract_new: Running\n @cmd\n";
    return system @cmd;
}

#-----------------------------------------------------

sub mmz_cleanup {
    use strict;
    print "============= I am mmz_cleanup \n";
    my @cmd = ( @memoize_clean, '--all', '--yes',
                      '--prefix', $aux_dir, 
                      "$aux_dir1$$Pbase.mmz" );
    print "mmz_cleanup: Running\n @cmd\n";
    my $ret = system @cmd;
    say "Return code $ret";
    return $ret;
}

#-----------------------------------------------------

