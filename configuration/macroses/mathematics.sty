\ProvidesPackage{macroses/mathematics}[2025/09/13 Utilities for typsetting formulas]

% AMS packages
\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
% Generic interfaces
\RequirePackage{mathcommand}
\RequirePackage{mathtools}  
% Fonts
\RequirePackage{upgreek}
\RequirePackage{dsfont}
\RequirePackage{euscript}


% Additional fonts and symbols

%% Importing usefull MnSymbol glyphs
%% Source: https://tex.stackexchange.com/questions/450691/create-diamond-with-a-dash-in-it/450703#450703

%%% MnSymbol Font Table
% \fonttable{MnSymbolA12}
% \newpage
% \fonttable{MnSymbolB12}
% \newpage
% \fonttable{MnSymbolC12}
% \newpage
% \fonttable{MnSymbolD12}
% \newpage
% \fonttable{MnSymbolE12}
% \newpage
% \fonttable{MnSymbolF12}


%\def\ImportFromMnSymbol#1{%
%  \DeclareFontFamily{U} {MnSymbol#1}{}
%  \DeclareFontShape{U}{MnSymbol#1}{m}{n}{
%   <-6> MnSymbol#15
%   <6-7> MnSymbol#16
%   <7-8> MnSymbol#17
%   <8-9> MnSymbol#18
%   <9-10> MnSymbol#19
%   <10-12> MnSymbol#110
%   <12-> MnSymbol#112}{}
%  \DeclareFontShape{U}{MnSymbol#1}{b}{n}{
%   <-6> MnSymbol#1-Bold5
%   <6-7> MnSymbol#1-Bold6
%   <7-8> MnSymbol#1-Bold7
%   <8-9> MnSymbol#1-Bold8
%   <9-10> MnSymbol#1-Bold9
%   <10-12> MnSymbol#1-Bold10
%   <12-> MnSymbol#1-Bold12}{}
%  \DeclareSymbolFont{MnSy#1} {U} {MnSymbol#1}{m}{n}
%}
%\newcommand\DeclareMnSymbol[4]{\DeclareMathSymbol{#1}{#2}{MnSy#3}{#4}}
%%%%



% patch for diffuclt opearator limits, etc
\RequirePackage{stackrel}   
% patch for scaleable sums, integrals products etc
\RequirePackage{scalerel} 
\RequirePackage{exscale}
% patch for typographically inline fractions
\RequirePackage{xfrac}
% patch for typographically correct braces
\RequirePackage{mleftright} 
% patch for vector arrows
\RequirePackage[d]{esvect}  

%% mathtools default behaviour is that *-command use auto-scaling
%% while non-* do not. Here we switch behaviour
\newcommand\swapifbranches[3]{#1{#3}{#2}}
\makeatletter
\MHInternalSyntaxOn
\patchcmd{\DeclarePairedDelimiter}{\@ifstar}{\swapifbranches\@ifstar}{}{}
\patchcmd{\DeclarePairedDelimiterXPP}{\@ifstar}{\swapifbranches\@ifstar}{}{}
\MHInternalSyntaxOff
\makeatother

%% Correct bracing in commands
\newmathcommand{\leftoperatorbrace}{\mleft(}
\newmathcommand{\rightoperatorbrace}{\mright)}
\newmathcommand{\leftoperatorbracket}{\mleft[}
\newmathcommand{\rightoperatorbracket}{\mright]}

%% Improve sizing of - and + in supscripts/subscripts
%%%% TODO: improve hardcoring
\newcommand{\medminus}{\mathop{\mathsmaller{-}}}
\newcommand{\medplus}{\mathop{\mathsmaller{+}}}
\newcommand{\pinfty}{{\raisebox{0.05ex}{\scaleobj{0.45}{+}}}\infty}
\newcommand{\ninfty}{{\raisebox{0.05ex}{\scaleobj{0.45}{-}}}\infty}

%% Force usage of \leqslant and \geqslant instead of
%% \leq and \geq
%\disablecommand{\leq\geq}
%\suggestcommand{\leq}{Use the better looking \leqslant.}
%\suggestcommand{\geq}{Use the better looking \geqslant.}


%%%% Introduce some commons  
\let\Proj\relax
\DeclareMathOperator{\Proj}{Proj}
\DeclareMathOperator{\argmax}{argmax}
\DeclareMathOperator{\argmin}{argmin}
\newmathcommand{\loc}{\mathrm{loc}}
\newmathcommand{\const}{\mathrm{const}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% CUSTOM COMMANDS %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%


\ExplSyntaxOn

% Trick to define PIE commands that can absorbs PIE first and only then produce arguments.
% Define your command as usual PIE command (so, PIE's aren't expanded or parsed);
% BUT PIE's will be respectevly #1, #2 and #3 (for details see mathcommand docs).
% Then use this command to allow firstly parse PIEF and only then parse arguments;
\NewDocumentCommand{\piefication}{m}{
    \exp_args:Nc\NewCommandCopy{old_\cs_to_str:N#1}{#1}
    \cs_set:cpn{internal_\cs_to_str:N#1:w}{\exp_args:Nc\__mathcommand_absorb_PIE:nw{old_\cs_to_str:N#1}}
    \exp_args:Nnc\RenewCommandCopy{#1}{internal_\cs_to_str:N#1:w}
}

% \DeclarePairedSplitDelimiter --- same as DeclarePairedDelimiter
% but also alignes vertical bar inside your command, see examples
% of set command. 
%% WARNING:: If you use | inside sush delimeter it will fail. E.g.
%% \set{ x \in \R | |x| > 1}
%% will result in error. Use \lvert and \rvert instead, or abs:
%% \set{ x \in \X | \abs{x} > 1}
\NewDocumentCommand{\DeclarePairedSplitDelimiter}{mmm}{
    %% Firstly we define internal variants in case when there is split, and when there is none
    \exp_args:Nc\DeclarePairedDelimiter{internal_base_\cs_to_str:N#1}{#2}{#3}
    \exp_args:Nc\DeclarePairedDelimiterX{internal_split_\cs_to_str:N#1}[2]{#2}{#3}
    {##1 \nonscript\:\delimsize\vert\allowbreak\nonscript\:\mathopen{} ##2}
    %% Now we create internal version of command
    \exp_args:Nc\NewDocumentCommand{internal_\cs_to_str:N#1}{omm}{
        \IfNoValueTF{##1}{
            \IfNoValueTF{##3}{
                \use:c{internal_base_\cs_to_str:N#1}{##2}
            }{
                \use:c{internal_split_\cs_to_str:N#1}{##2}{##3}
            }
        }{
            \IfNoValueTF{##3}{
                \use:c{internal_base_\cs_to_str:N#1}*[##1]{##2}
            }{
                \use:c{internal_split_\cs_to_str:N#1}*[##1]{##2}{##3}
            }
        }
    }
    %% Finaly, create latex2e interface
    \NewDocumentCommand{#1}{o >{\SplitArgument{1}{|} } m}{
        \IfNoValueTF{##1}{
            \use:c{internal_\cs_to_str:N#1}##2
        }{
            \use:c{internal_\cs_to_str:N#1}[##1]##2
        }
    }
}

% \NewTemplateCommand creates a template-macro
% \TemplateInstance specifies template-args
\NewDocumentCommand{\NewTemplateCommand}{m r<> m m}{\NewDocumentCommand{#1}{#2#3}{#4}}
\NewDocumentCommand{\TemplateInstance}{m m  >{\SplitList {,}}r<>}{\NewDocumentCommand{#1}{}{#2#3}}
\NewDocumentCommand{\TemplateInstancePIE}{m m  >{\SplitList {,}}r<>}{\NewDocumentCommand{#1}{}{#2#3}\piefication{#1}}

\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%%%
%% Custom commands %%
%%%%%%%%%%%%%%%%%%%%%


% %%%% Some enhancements
% \newmathcommand{\eqdef}{%
%     \mathrel{{\stackrel{\mbox{\tiny def}}{=}}}%
% }

% % Shortcuts for math mode
% \renewmathcommand{\i}{\imath}
% \renewmathcommand{\j}{\jmath}

% Bigger operators
%\sum_{i = 1}^{n}{
%   \mleft(....\mright.
%}
\ExplSyntaxOn
\NewTemplateCommand\tmpl_scalable_operation<m>{mmmm}{
    \scalerel{#1\limits#3#4#2}{#5}
}
\NewCommandCopy{\sum_symbol:}{\sum}
\NewCommandCopy{\int_symbol:}{\int}
\NewCommandCopy{\prod_symbol:}{\prod}
\TemplateInstancePIE\scaled_sum_symbol:\tmpl_scalable_operation<\sum_symbol:>
\TemplateInstancePIE\scaled_int_symbol:\tmpl_scalable_operation<\int_symbol:>
\TemplateInstancePIE\scaled_prod_symbol:\tmpl_scalable_operation<\prod_symbol:>
\RenewDocumentCommand{\sum}{s}{\IfBooleanTF{#1}{\scaled_sum_symbol:}{\sum_symbol:}}
\RenewDocumentCommand{\int}{s}{\IfBooleanTF{#1}{\scaled_int_symbol:}{\int_symbol:}}
\RenewDocumentCommand{\prod}{s}{\IfBooleanTF{#1}{\scaled_prod_symbol:}{\prod_symbol:}}
\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%
%% Math commands %%
%%%%%%%%%%%%%%%%%%%

\input{macroses/utils/mathematics/algebra}
\input{macroses/utils/mathematics/calculus}
\input{macroses/utils/mathematics/combinatorics}
\input{macroses/utils/mathematics/foundations}
\input{macroses/utils/mathematics/probability}